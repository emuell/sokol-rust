#![allow(dead_code)]

use sokol::gfx as sg;

/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i shader.glsl -l glsl330:glsl100:metal_macos:hlsl4 -f sokol_rust -o shader.rs

    Overview:

        Shader program 'dbg':
            Get shader desc: dbg_shader_desc(sg::query_backend());
            Vertex shader: vs_dbg
                Attribute slots:
                    ATTR_VS_DBG_POS = 0
            Fragment shader: fs_dbg
                Image 'tex':
                    Type: sg::ImageType::Dim2
                    Component Type: sg::SamplerType::Float
                    Bind slot: SLOT_TEX = 0

        Shader program 'fsq':
            Get shader desc: fsq_shader_desc(sg::query_backend());
            Vertex shader: vs_fsq
                Attribute slots:
                    ATTR_VS_FSQ_POS = 0
                Uniform block 'fsq_params':
                    C struct: fsq_params_t
                    Bind slot: SLOT_FSQ_PARAMS = 0
            Fragment shader: fs_fsq
                Image 'tex0':
                    Type: sg::ImageType::Dim2
                    Component Type: sg::SamplerType::Float
                    Bind slot: SLOT_TEX0 = 0
                Image 'tex1':
                    Type: sg::ImageType::Dim2
                    Component Type: sg::SamplerType::Float
                    Bind slot: SLOT_TEX1 = 1
                Image 'tex2':
                    Type: sg::ImageType::Dim2
                    Component Type: sg::SamplerType::Float
                    Bind slot: SLOT_TEX2 = 2

        Shader program 'offscreen':
            Get shader desc: offscreen_shader_desc(sg::query_backend());
            Vertex shader: vs_offscreen
                Attribute slots:
                    ATTR_VS_OFFSCREEN_POS = 0
                    ATTR_VS_OFFSCREEN_BRIGHT0 = 1
                Uniform block 'offscreen_params':
                    C struct: offscreen_params_t
                    Bind slot: SLOT_OFFSCREEN_PARAMS = 0
            Fragment shader: fs_offscreen

*/
use crate::math as m;
pub const ATTR_VS_OFFSCREEN_POS: usize = 0;
pub const ATTR_VS_OFFSCREEN_BRIGHT0: usize = 1;
pub const ATTR_VS_FSQ_POS: usize = 0;
pub const ATTR_VS_DBG_POS: usize = 0;
pub const SLOT_TEX0: usize = 0;
pub const SLOT_TEX1: usize = 1;
pub const SLOT_TEX2: usize = 2;
pub const SLOT_TEX: usize = 0;
pub const SLOT_OFFSCREEN_PARAMS: usize = 0;
#[repr(C)]
pub struct OffscreenParams {
    pub mvp: m::Mat4,
}
pub const SLOT_FSQ_PARAMS: usize = 0;
#[repr(C)]
pub struct FsqParams {
    pub offset: m::Vec2,
    pub _pad_8: [u8; 8],
}
/*
   #version 330

   uniform vec4 offscreen_params[4];
   layout(location = 0) in vec4 pos;
   out float bright;
   layout(location = 1) in float bright0;

   void main()
   {
       gl_Position = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]) * pos;
       bright = bright0;
   }

*/
pub const VS_OFFSCREEN_SOURCE_GLSL330: [u8; 294] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65,
    0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x34, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6f, 0x75, 0x74,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x6c, 0x61,
    0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31,
    0x29, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x30, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
    0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72,
    0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x6f, 0x66,
    0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x32, 0x5d,
    0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x5b, 0x33, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b,
    0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 330

   layout(location = 0) out vec4 frag_color_0;
   in float bright;
   layout(location = 1) out vec4 frag_color_1;
   layout(location = 2) out vec4 frag_color_2;

   void main()
   {
       frag_color_0 = vec4(bright, 0.0, 0.0, 1.0);
       frag_color_1 = vec4(0.0, bright, 0.0, 1.0);
       frag_color_2 = vec4(0.0, 0.0, bright, 1.0);
   }

*/
pub const FS_OFFSCREEN_SOURCE_GLSL330: [u8; 326] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x3b, 0x0a, 0x69, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62,
    0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65,
    0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x3b, 0x0a,
    0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d,
    0x20, 0x32, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67,
    0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x62, 0x72,
    0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31,
    0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
    0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20,
    0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x32, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30,
    0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d,
    0x0a, 0x0a, 0x00,
];
/*
   #version 330

   uniform vec4 fsq_params[1];
   layout(location = 0) in vec2 pos;
   out vec2 uv0;
   out vec2 uv1;
   out vec2 uv2;

   void main()
   {
       gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
       uv0 = pos + vec2(fsq_params[0].x, 0.0);
       uv1 = pos + vec2(0.0, fsq_params[0].y);
       uv2 = pos;
       gl_Position.y = -gl_Position.y;
   }

*/
pub const VS_FSQ_SOURCE_GLSL330: [u8; 335] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f,
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65,
    0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20,
    0x75, 0x76, 0x30, 0x3b, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x31,
    0x3b, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x0a,
    0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65,
    0x63, 0x34, 0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20,
    0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31,
    0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f,
    0x73, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61,
    0x6d, 0x73, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63,
    0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
    0x5b, 0x30, 0x5d, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d,
    0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x2d, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 330

   uniform sampler2D tex0;
   uniform sampler2D tex1;
   uniform sampler2D tex2;

   in vec2 uv0;
   in vec2 uv1;
   in vec2 uv2;
   layout(location = 0) out vec4 frag_color;

   void main()
   {
       frag_color = vec4((texture(tex0, uv0).xyz + texture(tex1, uv1).xyz) + texture(tex2, uv2).xyz, 1.0);
   }

*/
pub const FS_FSQ_SOURCE_GLSL330: [u8; 291] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65,
    0x78, 0x30, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x31, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
    0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x32, 0x3b,
    0x0a, 0x0a, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x69, 0x6e,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63,
    0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65,
    0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x0a, 0x76,
    0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x28, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2c, 0x20, 0x75,
    0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x28, 0x74, 0x65, 0x78, 0x31, 0x2c, 0x20, 0x75, 0x76, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20,
    0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x32, 0x2c, 0x20, 0x75,
    0x76, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a,
    0x0a, 0x00,
];
/*
   #version 330

   layout(location = 0) in vec2 pos;
   out vec2 uv;

   void main()
   {
       gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
       uv = pos;
       gl_Position.y = -gl_Position.y;
   }

*/
pub const VS_DBG_SOURCE_GLSL330: [u8; 189] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6f, 0x75, 0x74,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x28, 0x70, 0x6f,
    0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31,
    0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x2d,
    0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x3b, 0x0a, 0x7d, 0x0a,
    0x0a, 0x00,
];
/*
   #version 330

   uniform sampler2D tex;

   layout(location = 0) out vec4 frag_color;
   in vec2 uv;

   void main()
   {
       frag_color = vec4(texture(tex, uv).xyz, 1.0);
   }

*/
pub const FS_DBG_SOURCE_GLSL330: [u8; 161] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65,
    0x78, 0x3b, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x69, 0x6e, 0x20, 0x76, 0x65,
    0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e,
    0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
    0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x28, 0x74, 0x65, 0x78, 0x2c, 0x20, 0x75, 0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e,
    0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100

   uniform vec4 offscreen_params[4];
   attribute vec4 pos;
   varying float bright;
   attribute float bright0;

   void main()
   {
       gl_Position = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]) * pos;
       bright = bright0;
   }

*/
pub const VS_OFFSCREEN_SOURCE_GLSL100: [u8; 270] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65,
    0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x34, 0x5d, 0x3b, 0x0a, 0x61, 0x74, 0x74,
    0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69,
    0x67, 0x68, 0x74, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69,
    0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c,
    0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28,
    0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b,
    0x30, 0x5d, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63,
    0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x33, 0x5d, 0x29, 0x20, 0x2a,
    0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20,
    0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100
   #extension GL_EXT_draw_buffers : require
   precision mediump float;
   precision highp int;

   varying highp float bright;

   void main()
   {
       gl_FragData[0] = vec4(bright, 0.0, 0.0, 1.0);
       gl_FragData[1] = vec4(0.0, bright, 0.0, 1.0);
       gl_FragData[2] = vec4(0.0, 0.0, bright, 1.0);
   }

*/
pub const FS_OFFSCREEN_SOURCE_GLSL100: [u8; 298] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x23, 0x65, 0x78, 0x74,
    0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x64, 0x72, 0x61,
    0x77, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
    0x72, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x69,
    0x75, 0x6d, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
    0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x0a, 0x76,
    0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72,
    0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x5b, 0x30, 0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28,
    0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c,
    0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61,
    0x67, 0x44, 0x61, 0x74, 0x61, 0x5b, 0x31, 0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30,
    0x2e, 0x30, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20,
    0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67,
    0x44, 0x61, 0x74, 0x61, 0x5b, 0x32, 0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e,
    0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31,
    0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100

   uniform vec4 fsq_params[1];
   attribute vec2 pos;
   varying vec2 uv0;
   varying vec2 uv1;
   varying vec2 uv2;

   void main()
   {
       gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
       uv0 = pos + vec2(fsq_params[0].x, 0.0);
       uv1 = pos + vec2(0.0, fsq_params[0].y);
       uv2 = pos;
       gl_Position.y = -gl_Position.y;
   }

*/
pub const VS_FSQ_SOURCE_GLSL100: [u8; 333] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e,
    0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69,
    0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79,
    0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x0a, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67,
    0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x76, 0x65,
    0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20,
    0x2b, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
    0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28,
    0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30,
    0x5d, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x70,
    0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x2d, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x79, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100
   precision mediump float;
   precision highp int;

   uniform highp sampler2D tex0;
   uniform highp sampler2D tex1;
   uniform highp sampler2D tex2;

   varying highp vec2 uv0;
   varying highp vec2 uv1;
   varying highp vec2 uv2;

   void main()
   {
       gl_FragData[0] = vec4((texture2D(tex0, uv0).xyz + texture2D(tex1, uv1).xyz) + texture2D(tex2, uv2).xyz, 1.0);
   }

*/
pub const FS_FSQ_SOURCE_GLSL100: [u8; 356] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x70, 0x72, 0x65, 0x63,
    0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67,
    0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20,
    0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74,
    0x65, 0x78, 0x30, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68,
    0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x31, 0x3b,
    0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x32, 0x3b, 0x0a, 0x0a, 0x76, 0x61,
    0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20,
    0x75, 0x76, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x69, 0x67, 0x68,
    0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69,
    0x6e, 0x67, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x32,
    0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x5b, 0x30,
    0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
    0x32, 0x44, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2c, 0x20, 0x75, 0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a,
    0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x74, 0x65, 0x78, 0x31,
    0x2c, 0x20, 0x75, 0x76, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x74, 0x65, 0x78, 0x32, 0x2c, 0x20, 0x75, 0x76, 0x32, 0x29,
    0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100

   attribute vec2 pos;
   varying vec2 uv;

   void main()
   {
       gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
       uv = pos;
       gl_Position.y = -gl_Position.y;
   }

*/
pub const VS_DBG_SOURCE_GLSL100: [u8; 179] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x0a, 0x61, 0x74, 0x74,
    0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a,
    0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76,
    0x65, 0x63, 0x34, 0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20,
    0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x70, 0x6f,
    0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x2d, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x79, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #version 100
   precision mediump float;
   precision highp int;

   uniform highp sampler2D tex;

   varying highp vec2 uv;

   void main()
   {
       gl_FragData[0] = vec4(texture2D(tex, uv).xyz, 1.0);
   }

*/
pub const FS_DBG_SOURCE_GLSL100: [u8; 188] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x0a, 0x70, 0x72, 0x65, 0x63,
    0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67,
    0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20,
    0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74,
    0x65, 0x78, 0x3b, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x69, 0x67, 0x68,
    0x70, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x46,
    0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x5b, 0x30, 0x5d, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x28, 0x74, 0x65, 0x78, 0x2c, 0x20, 0x75,
    0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a,
    0x00,
];
/*
   cbuffer offscreen_params : register(b0)
   {
       row_major float4x4 _21_mvp : packoffset(c0);
   };


   static float4 gl_Position;
   static float4 pos;
   static float bright;
   static float bright0;

   struct SPIRV_Cross_Input
   {
       float4 pos : TEXCOORD0;
       float bright0 : TEXCOORD1;
   };

   struct SPIRV_Cross_Output
   {
       float bright : TEXCOORD0;
       float4 gl_Position : SV_Position;
   };

   #line 17 "shader.glsl"
   void vert_main()
   {
   #line 17 "shader.glsl"
       gl_Position = mul(pos, _21_mvp);
   #line 18 "shader.glsl"
       bright = bright0;
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       pos = stage_input.pos;
       bright0 = stage_input.bright0;
       vert_main();
       SPIRV_Cross_Output stage_output;
       stage_output.gl_Position = gl_Position;
       stage_output.bright = bright;
       return stage_output;
   }
*/
pub const VS_OFFSCREEN_SOURCE_HLSL4: [u8; 805] = [
    0x63, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
    0x72, 0x28, 0x62, 0x30, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x5f, 0x6d,
    0x61, 0x6a, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x32, 0x31,
    0x5f, 0x6d, 0x76, 0x70, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
    0x28, 0x63, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
    0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
    0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x30, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x31, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3a, 0x20,
    0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3a, 0x20, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b,
    0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65,
    0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x74,
    0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31,
    0x37, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20,
    0x6d, 0x75, 0x6c, 0x28, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x5f, 0x32, 0x31, 0x5f, 0x6d, 0x76, 0x70, 0x29,
    0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65,
    0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53,
    0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
    0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
    0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75,
    0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67,
    0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72,
    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   static float4 frag_color_0;
   static float bright;
   static float4 frag_color_1;
   static float4 frag_color_2;

   struct SPIRV_Cross_Input
   {
       float bright : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float4 frag_color_0 : SV_Target0;
       float4 frag_color_1 : SV_Target1;
       float4 frag_color_2 : SV_Target2;
   };

   #line 13 "shader.glsl"
   void frag_main()
   {
   #line 13 "shader.glsl"
       frag_color_0 = float4(bright, 0.0f, 0.0f, 1.0f);
   #line 14 "shader.glsl"
       frag_color_1 = float4(0.0f, bright, 0.0f, 1.0f);
   #line 15 "shader.glsl"
       frag_color_2 = float4(0.0f, 0.0f, bright, 1.0f);
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       bright = stage_input.bright;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.frag_color_0 = frag_color_0;
       stage_output.frag_color_1 = frag_color_1;
       stage_output.frag_color_2 = frag_color_2;
       return stage_output;
   }
*/
pub const FS_OFFSCREEN_SOURCE_HLSL4: [u8; 896] = [
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61,
    0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x32, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3a, 0x20, 0x54,
    0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f,
    0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3a, 0x20,
    0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x31, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
    0x32, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x33, 0x20, 0x22,
    0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64,
    0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c,
    0x69, 0x6e, 0x65, 0x20, 0x31, 0x33, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c,
    0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31,
    0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x34, 0x20, 0x22, 0x73,
    0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c,
    0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x31, 0x35, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
    0x5f, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c,
    0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e,
    0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f,
    0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
    0x6e, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61,
    0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
    0x6f, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f,
    0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x32, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   cbuffer fsq_params : register(b0)
   {
       float2 _38_offset : packoffset(c0);
   };


   static float4 gl_Position;
   static float2 pos;
   static float2 uv0;
   static float2 uv1;
   static float2 uv2;

   struct SPIRV_Cross_Input
   {
       float2 pos : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float2 uv0 : TEXCOORD0;
       float2 uv1 : TEXCOORD1;
       float2 uv2 : TEXCOORD2;
       float4 gl_Position : SV_Position;
   };

   #line 18 "shader.glsl"
   void vert_main()
   {
   #line 18 "shader.glsl"
       gl_Position = float4((pos * 2.0f) - 1.0f.xx, 0.5f, 1.0f);
   #line 19 "shader.glsl"
       uv0 = pos + float2(_38_offset.x, 0.0f);
   #line 20 "shader.glsl"
       uv1 = pos + float2(0.0f, _38_offset.y);
   #line 21 "shader.glsl"
       uv2 = pos;
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       pos = stage_input.pos;
       vert_main();
       SPIRV_Cross_Output stage_output;
       stage_output.gl_Position = gl_Position;
       stage_output.uv0 = uv0;
       stage_output.uv1 = uv1;
       stage_output.uv2 = uv2;
       return stage_output;
   }
*/
pub const VS_FSQ_SOURCE_HLSL4: [u8; 994] = [
    0x63, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x62, 0x30, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x38, 0x5f,
    0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73,
    0x65, 0x74, 0x28, 0x63, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
    0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
    0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30,
    0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52,
    0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3a, 0x20,
    0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
    0x52, 0x44, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75,
    0x76, 0x32, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x32, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22,
    0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64,
    0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c,
    0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c,
    0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x70, 0x6f, 0x73, 0x20,
    0x2a, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2e, 0x78, 0x78,
    0x2c, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x23, 0x6c,
    0x69, 0x6e, 0x65, 0x20, 0x31, 0x39, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c,
    0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73,
    0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x33, 0x38, 0x5f, 0x6f, 0x66, 0x66,
    0x73, 0x65, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x32, 0x30, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20,
    0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x5f, 0x33,
    0x38, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e,
    0x65, 0x20, 0x32, 0x31, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c,
    0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75,
    0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43,
    0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x6f, 0x73, 0x20,
    0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x6f, 0x73,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
    0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74,
    0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75,
    0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76,
    0x30, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x75, 0x76,
    0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70,
    0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74,
    0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   Texture2D<float4> tex0 : register(t0);
   SamplerState _tex0_sampler : register(s0);
   Texture2D<float4> tex1 : register(t1);
   SamplerState _tex1_sampler : register(s1);
   Texture2D<float4> tex2 : register(t2);
   SamplerState _tex2_sampler : register(s2);

   static float2 uv0;
   static float2 uv1;
   static float2 uv2;
   static float4 frag_color;

   struct SPIRV_Cross_Input
   {
       float2 uv0 : TEXCOORD0;
       float2 uv1 : TEXCOORD1;
       float2 uv2 : TEXCOORD2;
   };

   struct SPIRV_Cross_Output
   {
       float4 frag_color : SV_Target0;
   };

   #line 17 "shader.glsl"
   void frag_main()
   {
   #line 17 "shader.glsl"
   #line 18 "shader.glsl"
   #line 19 "shader.glsl"
   #line 20 "shader.glsl"
       frag_color = float4((tex0.Sample(_tex0_sampler, uv0).xyz + tex1.Sample(_tex1_sampler, uv1).xyz) + tex2.Sample(_tex2_sampler, uv2).xyz, 1.0f);
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       uv0 = stage_input.uv0;
       uv1 = stage_input.uv1;
       uv2 = stage_input.uv2;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.frag_color = frag_color;
       return stage_output;
   }
*/
pub const FS_FSQ_SOURCE_HLSL4: [u8; 1059] = [
    0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e,
    0x20, 0x74, 0x65, 0x78, 0x30, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28,
    0x74, 0x30, 0x29, 0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x20, 0x5f, 0x74, 0x65, 0x78, 0x30, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20,
    0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, 0x30, 0x29, 0x3b, 0x0a, 0x54, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x74, 0x65,
    0x78, 0x31, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x31, 0x29,
    0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x5f, 0x74,
    0x65, 0x78, 0x31, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67,
    0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, 0x31, 0x29, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x32, 0x20,
    0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x32, 0x29, 0x3b, 0x0a, 0x53,
    0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x5f, 0x74, 0x65, 0x78, 0x32,
    0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
    0x65, 0x72, 0x28, 0x73, 0x32, 0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3a,
    0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f,
    0x4f, 0x52, 0x44, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20,
    0x75, 0x76, 0x32, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x32, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
    0x6f, 0x72, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61,
    0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65,
    0x20, 0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22,
    0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72,
    0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x39, 0x20, 0x22,
    0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x23, 0x6c, 0x69, 0x6e,
    0x65, 0x20, 0x32, 0x30, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c,
    0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20,
    0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2e, 0x53, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x30, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
    0x72, 0x2c, 0x20, 0x75, 0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78,
    0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x31, 0x5f, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x76, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20,
    0x2b, 0x20, 0x74, 0x65, 0x78, 0x32, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x74, 0x65,
    0x78, 0x32, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x76, 0x32, 0x29, 0x2e,
    0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
    0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
    0x74, 0x2e, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f,
    0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70,
    0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   static float4 gl_Position;
   static float2 pos;
   static float2 uv;

   struct SPIRV_Cross_Input
   {
       float2 pos : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float2 uv : TEXCOORD0;
       float4 gl_Position : SV_Position;
   };

   #line 11 "shader.glsl"
   void vert_main()
   {
   #line 11 "shader.glsl"
       gl_Position = float4((pos * 2.0f) - 1.0f.xx, 0.5f, 1.0f);
   #line 12 "shader.glsl"
       uv = pos;
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       pos = stage_input.pos;
       vert_main();
       SPIRV_Cross_Output stage_output;
       stage_output.gl_Position = gl_Position;
       stage_output.uv = uv;
       return stage_output;
   }
*/
pub const VS_DBG_SOURCE_HLSL4: [u8; 624] = [
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
    0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49,
    0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x20, 0x3a, 0x20, 0x54, 0x45,
    0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20,
    0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a,
    0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x31, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e,
    0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d,
    0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x31, 0x20,
    0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x29,
    0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2e, 0x78, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x2c,
    0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x32, 0x20,
    0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49,
    0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49,
    0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29,
    0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67,
    0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x50,
    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   Texture2D<float4> tex : register(t0);
   SamplerState _tex_sampler : register(s0);

   static float4 frag_color;
   static float2 uv;

   struct SPIRV_Cross_Input
   {
       float2 uv : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float4 frag_color : SV_Target0;
   };

   #line 12 "shader.glsl"
   void frag_main()
   {
   #line 12 "shader.glsl"
       frag_color = float4(tex.Sample(_tex_sampler, uv).xyz, 1.0f);
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       uv = stage_input.uv;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.frag_color = frag_color;
       return stage_output;
   }
*/
pub const FS_DBG_SOURCE_HLSL4: [u8; 591] = [
    0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e,
    0x20, 0x74, 0x65, 0x78, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74,
    0x30, 0x29, 0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20,
    0x5f, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x65,
    0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, 0x30, 0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49,
    0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x20, 0x3a, 0x20, 0x54,
    0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f,
    0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3a, 0x20, 0x53, 0x56,
    0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x31, 0x32, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
    0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x32, 0x20, 0x22, 0x73, 0x68,
    0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x28, 0x74, 0x65, 0x78, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x5f, 0x74, 0x65, 0x78, 0x5f,
    0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x75, 0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c,
    0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e,
    0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75,
    0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
    0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct offscreen_params
   {
       float4x4 mvp;
   };

   struct main0_out
   {
       float bright [[user(locn0)]];
       float4 gl_Position [[position]];
   };

   struct main0_in
   {
       float4 pos [[attribute(0)]];
       float bright0 [[attribute(1)]];
   };

   #line 17 "shader.glsl"
   vertex main0_out main0(main0_in in [[stage_in]], constant offscreen_params& _21 [[buffer(0)]])
   {
       main0_out out = {};
   #line 17 "shader.glsl"
       out.gl_Position = _21.mvp * in.pos;
   #line 18 "shader.glsl"
       out.bright = in.bright0;
       return out;
   }

*/
pub const VS_OFFSCREEN_SOURCE_METAL_MACOS: [u8; 584] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72,
    0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x76, 0x70, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a,
    0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74,
    0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d,
    0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23,
    0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67,
    0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30,
    0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d,
    0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63,
    0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x26, 0x20, 0x5f, 0x32, 0x31, 0x20,
    0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74,
    0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x37, 0x20, 0x22,
    0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d,
    0x20, 0x5f, 0x32, 0x31, 0x2e, 0x6d, 0x76, 0x70, 0x20, 0x2a, 0x20, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73,
    0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65,
    0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62,
    0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74,
    0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct main0_out
   {
       float4 frag_color_0 [[color(0)]];
       float4 frag_color_1 [[color(1)]];
       float4 frag_color_2 [[color(2)]];
   };

   struct main0_in
   {
       float bright [[user(locn0)]];
   };

   #line 13 "shader.glsl"
   fragment main0_out main0(main0_in in [[stage_in]])
   {
       main0_out out = {};
   #line 13 "shader.glsl"
       out.frag_color_0 = float4(in.bright, 0.0, 0.0, 1.0);
   #line 14 "shader.glsl"
       out.frag_color_1 = float4(0.0, in.bright, 0.0, 1.0);
   #line 15 "shader.glsl"
       out.frag_color_2 = float4(0.0, 0.0, in.bright, 1.0);
       return out;
   }

*/
pub const FS_OFFSCREEN_SOURCE_METAL_MACOS: [u8; 625] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20,
    0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x5f, 0x32, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30,
    0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62,
    0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e,
    0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31,
    0x33, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x66,
    0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69,
    0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75,
    0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x33, 0x20,
    0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30,
    0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30,
    0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x34, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64,
    0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x23, 0x6c,
    0x69, 0x6e, 0x65, 0x20, 0x31, 0x35, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c,
    0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28,
    0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74,
    0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct fsq_params
   {
       float2 offset;
   };

   struct main0_out
   {
       float2 uv0 [[user(locn0)]];
       float2 uv1 [[user(locn1)]];
       float2 uv2 [[user(locn2)]];
       float4 gl_Position [[position]];
   };

   struct main0_in
   {
       float2 pos [[attribute(0)]];
   };

   #line 18 "shader.glsl"
   vertex main0_out main0(main0_in in [[stage_in]], constant fsq_params& _38 [[buffer(0)]])
   {
       main0_out out = {};
   #line 18 "shader.glsl"
       out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);
   #line 19 "shader.glsl"
       out.uv0 = in.pos + float2(_38.offset.x, 0.0);
   #line 20 "shader.glsl"
       out.uv1 = in.pos + float2(0.0, _38.offset.y);
   #line 21 "shader.glsl"
       out.uv2 = in.pos;
       return out;
   }

*/
pub const VS_FSQ_SOURCE_METAL_MACOS: [u8; 768] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75,
    0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73,
    0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72,
    0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c,
    0x6f, 0x63, 0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b,
    0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b,
    0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d,
    0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64,
    0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61,
    0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66,
    0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x26, 0x20, 0x5f, 0x33, 0x38, 0x20, 0x5b, 0x5b,
    0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d,
    0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x38, 0x20, 0x22, 0x73, 0x68,
    0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75,
    0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32,
    0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29,
    0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e,
    0x65, 0x20, 0x31, 0x39, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c,
    0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x69,
    0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x33,
    0x38, 0x2e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b,
    0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x32, 0x30, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72,
    0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76,
    0x31, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x33, 0x38, 0x2e, 0x6f, 0x66, 0x66, 0x73, 0x65,
    0x74, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x32, 0x31, 0x20, 0x22, 0x73,
    0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f,
    0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d,
    0x0a, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct main0_out
   {
       float4 frag_color [[color(0)]];
   };

   struct main0_in
   {
       float2 uv0 [[user(locn0)]];
       float2 uv1 [[user(locn1)]];
       float2 uv2 [[user(locn2)]];
   };

   #line 17 "shader.glsl"
   fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex0 [[texture(0)]], texture2d<float> tex1 [[texture(1)]], texture2d<float> tex2 [[texture(2)]], sampler tex0Smplr [[sampler(0)]], sampler tex1Smplr [[sampler(1)]], sampler tex2Smplr [[sampler(2)]])
   {
       main0_out out = {};
   #line 17 "shader.glsl"
   #line 18 "shader.glsl"
   #line 19 "shader.glsl"
   #line 20 "shader.glsl"
       out.frag_color = float4((tex0.sample(tex0Smplr, in.uv0).xyz + tex1.sample(tex1Smplr, in.uv1).xyz) + tex2.sample(tex2Smplr, in.uv2).xyz, 1.0);
       return out;
   }

*/
pub const FS_FSQ_SOURCE_METAL_MACOS: [u8; 823] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72,
    0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c,
    0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63,
    0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20,
    0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a,
    0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20,
    0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20,
    0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20,
    0x74, 0x65, 0x78, 0x30, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29,
    0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x31, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64,
    0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x32, 0x20, 0x5b, 0x5b, 0x74, 0x65,
    0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x30, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x31, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x32, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61,
    0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20,
    0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x37, 0x20, 0x22, 0x73, 0x68, 0x61,
    0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31,
    0x38, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x23,
    0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x39, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67,
    0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x32, 0x30, 0x20, 0x22, 0x73, 0x68,
    0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75,
    0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
    0x28, 0x74, 0x65, 0x78, 0x30, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x75, 0x76,
    0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x31, 0x2e, 0x73, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x31, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x2c, 0x20, 0x69, 0x6e,
    0x2e, 0x75, 0x76, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x32,
    0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x32, 0x53, 0x6d, 0x70, 0x6c, 0x72,
    0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x75, 0x76, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e,
    0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75,
    0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct main0_out
   {
       float2 uv [[user(locn0)]];
       float4 gl_Position [[position]];
   };

   struct main0_in
   {
       float2 pos [[attribute(0)]];
   };

   #line 11 "shader.glsl"
   vertex main0_out main0(main0_in in [[stage_in]])
   {
       main0_out out = {};
   #line 11 "shader.glsl"
       out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);
   #line 12 "shader.glsl"
       out.uv = in.pos;
       return out;
   }

*/
pub const VS_DBG_SOURCE_METAL_MACOS: [u8; 473] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20,
    0x75, 0x76, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d,
    0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x31, 0x31, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f,
    0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e,
    0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x29,
    0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20,
    0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31,
    0x31, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x69, 0x6e, 0x2e, 0x70, 0x6f,
    0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b,
    0x0a, 0x23, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x31, 0x32, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72,
    0x2e, 0x67, 0x6c, 0x73, 0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76,
    0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
   #include <metal_stdlib>
   #include <simd/simd.h>

   using namespace metal;

   struct main0_out
   {
       float4 frag_color [[color(0)]];
   };

   struct main0_in
   {
       float2 uv [[user(locn0)]];
   };

   #line 12 "shader.glsl"
   fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]])
   {
       main0_out out = {};
   #line 12 "shader.glsl"
       out.frag_color = float4(tex.sample(texSmplr, in.uv).xyz, 1.0);
       return out;
   }

*/
pub const FS_DBG_SOURCE_METAL_MACOS: [u8; 464] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28,
    0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x31, 0x32, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30,
    0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d,
    0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28,
    0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78,
    0x53, 0x6d, 0x70, 0x6c, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30,
    0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x23, 0x6c, 0x69,
    0x6e, 0x65, 0x20, 0x31, 0x32, 0x20, 0x22, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x6c, 0x73,
    0x6c, 0x22, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78,
    0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x53, 0x6d, 0x70, 0x6c, 0x72, 0x2c,
    0x20, 0x69, 0x6e, 0x2e, 0x75, 0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b,
    0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];

pub fn dbg_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    match backend {
        sg::Backend::Glcore33 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.vs.source = &VS_DBG_SOURCE_GLSL330 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.source = &FS_DBG_SOURCE_GLSL330 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.label = b"dbg_shader\0".as_ptr() as *const _;
        },
        sg::Backend::Gles2 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.vs.source = &VS_DBG_SOURCE_GLSL100 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.source = &FS_DBG_SOURCE_GLSL100 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.label = b"dbg_shader\0".as_ptr() as *const _;
        },
        sg::Backend::D3d11 => {
            desc.attrs[0].sem_name = b"TEXCOORD\0".as_ptr() as *const _;
            desc.attrs[0].sem_index = 0;
            desc.vs.source = &VS_DBG_SOURCE_HLSL4 as *const _ as *const _;
            desc.vs.d3d11_target = b"vs_4_0\0".as_ptr() as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.source = &FS_DBG_SOURCE_HLSL4 as *const _ as *const _;
            desc.fs.d3d11_target = b"ps_4_0\0".as_ptr() as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.label = b"dbg_shader\0".as_ptr() as *const _;
        },
        sg::Backend::MetalMacos => {
            desc.vs.source = &VS_DBG_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vs.entry = b"main0\0".as_ptr() as *const _;
            desc.fs.source = &FS_DBG_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fs.entry = b"main0\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.label = b"dbg_shader\0".as_ptr() as *const _;
        },
        _ => {},
    }
    desc
}
pub fn fsq_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    match backend {
        sg::Backend::Glcore33 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.vs.source = &VS_FSQ_SOURCE_GLSL330 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.vs.uniform_blocks[0].uniforms[0].name = b"fsq_params\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].uniforms[0]._type = sg::UniformType::Float4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.source = &FS_FSQ_SOURCE_GLSL330 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex0\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.fs.images[1].name = b"tex1\0".as_ptr() as *const _;
            desc.fs.images[1].image_type = sg::ImageType::Dim2;
            desc.fs.images[1].sampler_type = sg::SamplerType::Float;
            desc.fs.images[2].name = b"tex2\0".as_ptr() as *const _;
            desc.fs.images[2].image_type = sg::ImageType::Dim2;
            desc.fs.images[2].sampler_type = sg::SamplerType::Float;
            desc.label = b"fsq_shader\0".as_ptr() as *const _;
        },
        sg::Backend::Gles2 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.vs.source = &VS_FSQ_SOURCE_GLSL100 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.vs.uniform_blocks[0].uniforms[0].name = b"fsq_params\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].uniforms[0]._type = sg::UniformType::Float4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.source = &FS_FSQ_SOURCE_GLSL100 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex0\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.fs.images[1].name = b"tex1\0".as_ptr() as *const _;
            desc.fs.images[1].image_type = sg::ImageType::Dim2;
            desc.fs.images[1].sampler_type = sg::SamplerType::Float;
            desc.fs.images[2].name = b"tex2\0".as_ptr() as *const _;
            desc.fs.images[2].image_type = sg::ImageType::Dim2;
            desc.fs.images[2].sampler_type = sg::SamplerType::Float;
            desc.label = b"fsq_shader\0".as_ptr() as *const _;
        },
        sg::Backend::D3d11 => {
            desc.attrs[0].sem_name = b"TEXCOORD\0".as_ptr() as *const _;
            desc.attrs[0].sem_index = 0;
            desc.vs.source = &VS_FSQ_SOURCE_HLSL4 as *const _ as *const _;
            desc.vs.d3d11_target = b"vs_4_0\0".as_ptr() as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.fs.source = &FS_FSQ_SOURCE_HLSL4 as *const _ as *const _;
            desc.fs.d3d11_target = b"ps_4_0\0".as_ptr() as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex0\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.fs.images[1].name = b"tex1\0".as_ptr() as *const _;
            desc.fs.images[1].image_type = sg::ImageType::Dim2;
            desc.fs.images[1].sampler_type = sg::SamplerType::Float;
            desc.fs.images[2].name = b"tex2\0".as_ptr() as *const _;
            desc.fs.images[2].image_type = sg::ImageType::Dim2;
            desc.fs.images[2].sampler_type = sg::SamplerType::Float;
            desc.label = b"fsq_shader\0".as_ptr() as *const _;
        },
        sg::Backend::MetalMacos => {
            desc.vs.source = &VS_FSQ_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vs.entry = b"main0\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.fs.source = &FS_FSQ_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fs.entry = b"main0\0".as_ptr() as *const _;
            desc.fs.images[0].name = b"tex0\0".as_ptr() as *const _;
            desc.fs.images[0].image_type = sg::ImageType::Dim2;
            desc.fs.images[0].sampler_type = sg::SamplerType::Float;
            desc.fs.images[1].name = b"tex1\0".as_ptr() as *const _;
            desc.fs.images[1].image_type = sg::ImageType::Dim2;
            desc.fs.images[1].sampler_type = sg::SamplerType::Float;
            desc.fs.images[2].name = b"tex2\0".as_ptr() as *const _;
            desc.fs.images[2].image_type = sg::ImageType::Dim2;
            desc.fs.images[2].sampler_type = sg::SamplerType::Float;
            desc.label = b"fsq_shader\0".as_ptr() as *const _;
        },
        _ => {},
    }
    desc
}
pub fn offscreen_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    match backend {
        sg::Backend::Glcore33 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.attrs[1].name = b"bright0\0".as_ptr() as *const _;
            desc.vs.source = &VS_OFFSCREEN_SOURCE_GLSL330 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 64;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.vs.uniform_blocks[0].uniforms[0].name = b"offscreen_params\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].uniforms[0]._type = sg::UniformType::Float4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
            desc.fs.source = &FS_OFFSCREEN_SOURCE_GLSL330 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.label = b"offscreen_shader\0".as_ptr() as *const _;
        },
        sg::Backend::Gles2 => {
            desc.attrs[0].name = b"pos\0".as_ptr() as *const _;
            desc.attrs[1].name = b"bright0\0".as_ptr() as *const _;
            desc.vs.source = &VS_OFFSCREEN_SOURCE_GLSL100 as *const _ as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 64;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.vs.uniform_blocks[0].uniforms[0].name = b"offscreen_params\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].uniforms[0]._type = sg::UniformType::Float4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
            desc.fs.source = &FS_OFFSCREEN_SOURCE_GLSL100 as *const _ as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.label = b"offscreen_shader\0".as_ptr() as *const _;
        },
        sg::Backend::D3d11 => {
            desc.attrs[0].sem_name = b"TEXCOORD\0".as_ptr() as *const _;
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = b"TEXCOORD\0".as_ptr() as *const _;
            desc.attrs[1].sem_index = 1;
            desc.vs.source = &VS_OFFSCREEN_SOURCE_HLSL4 as *const _ as *const _;
            desc.vs.d3d11_target = b"vs_4_0\0".as_ptr() as *const _;
            desc.vs.entry = b"main\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 64;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.fs.source = &FS_OFFSCREEN_SOURCE_HLSL4 as *const _ as *const _;
            desc.fs.d3d11_target = b"ps_4_0\0".as_ptr() as *const _;
            desc.fs.entry = b"main\0".as_ptr() as *const _;
            desc.label = b"offscreen_shader\0".as_ptr() as *const _;
        },
        sg::Backend::MetalMacos => {
            desc.vs.source = &VS_OFFSCREEN_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vs.entry = b"main0\0".as_ptr() as *const _;
            desc.vs.uniform_blocks[0].size = 64;
            desc.vs.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.fs.source = &FS_OFFSCREEN_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fs.entry = b"main0\0".as_ptr() as *const _;
            desc.label = b"offscreen_shader\0".as_ptr() as *const _;
        },
        _ => {},
    }
    desc
}
